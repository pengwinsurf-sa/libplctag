name: libplctag CI

on:
    push:
      branches: [ "main" ]
    pull_request:
      branches: [ "main" ]
    workflow_dispatch:

jobs:

  ubuntu_x64:
    runs-on: ubuntu-22.04

    env:
      VERSION: "2.6.9"
      ARTIFACT: "libplctag_2.6.9_ubuntu_x64"
      BUILD: "${{ github.workspace }}/build"
      DIST: "${{ github.workspace }}/build/bin_dist"

    steps:
    - name: "Checkout library source."
      uses: actions/checkout@v4

    - name: Set up build environment
      run: sudo apt update; sudo apt install build-essential cmake libmodbus5 libmodbus-dev

    - name: Create build directory
      run: rm -rf ${{ env.BUILD }}; mkdir -p ${{ env.BUILD }}

    - name: Configure CMake
      run: cd ${{ env.BUILD }}; cmake -DCMAKE_INSTALL_PREFIX=$GITHUB_WORKSPACE/install_dir -DCMAKE_BUILD_TYPE=MinSizeRel -DBUILD_MODBUS_EMULATOR:BOOL=On -DCMAKE_VERBOSE_MAKEFILE=On -DCMAKE_C_FLAGS="-ftest-coverage -fprofile-arcs" -DCMAKE_CXX_FLAGS="-ftest-coverage -fprofile-arcs" ..

    - name: Build
      run: cd ${{ env.BUILD }}; cmake --build . --verbose

    - name: Test Basic Functions
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --debug --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] --delay=50 &
        sleep 2
        echo "test simple get/set tag."
        ${{ env.DIST }}/simple
        echo "test callback use."
        ${{ env.DIST }}/test_callback
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Micro800
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Micro800 '--tag=TestDINTArray:DINT[10]' --debug &
        sleep 2
        echo "test getting a tag on a Micro800."
        ${{ env.DIST }}/tag_rw2 --type=sint32  '--tag=protocol=ab_eip&gateway=127.0.0.1&cpu=micro800&elem_size=4&elem_count=1&name=TestDINTArray[0]' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Omron NJ/NX
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=Omron '--tag=TestDINTArray:DINT[10]' --debug  &
        sleep 2
        echo "test getting a tag on an Omron NJ/NX."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=18,127.0.0.1&plc=omron-njnx&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test PLC/5
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=PLC/5 --tag=N7[10] --debug  &
        sleep 3
        echo "test getting a tag on a PLC/5."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=plc5&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test SLC 500
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=SLC500 --tag=N7[10] --debug &
        sleep 3
        echo "test getting a tag on a SLC 500."
        ${{ env.DIST }}/tag_rw2 --type=sint16 '--tag=protocol=ab_eip&gateway=127.0.0.1&plc=slc&elem_size=2&elem_count=10&name=N7:0' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Duplicate Connection ID
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestDINTArray:DINT[10] --reject-fo=5 --debug &
        sleep 2
        echo "test getting a tag with connection failures."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&name=TestDINTArray' --debug=2
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Large Tags
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 --tag=TestBigArray:DINT[2000] &
        sleep 2
        echo "test getting a large tag."
        ${{ env.DIST }}/tag_rw2 --type=sint32 '--tag=protocol=ab-eip&gateway=127.0.0.1&path=1,0&plc=ControlLogix&elem_count=2000&name=TestBigArray'
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    - name: Test Array Notation Read/Write
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/ab_server --plc=ControlLogix --path=1,0 "--tag=TestBigArray:DINT[2000]" "--tag=Test_Array_1:DINT[1000]" "--tag=Test_Array_2x3:DINT[2,3]" "--tag=Test_Array_2x3x4:DINT[2,3,4]" &
        sleep 2
        echo "test array notation read/write"
        ${{ env.DIST }}/test_indexed_tags
        echo "shut down server."
        killall ab_server -INT &> /dev/null

    #- name: Test Simultaneous Read/Write On Tag
    #  run: |
    #    cd ${{ env.DIST }}
    #    echo "test simultaneous read/write on a single tag"
    #    ./test_simultaneous_rw_ab_server

    - name: Test Reconnect After Outage
      run: |
        cd ${{ env.DIST }}
        echo "Test reconnect after outage"
        ${{ env.DIST }}/test_reconnect_after_outage ./ab_server

    - name: Test Modbus
      run: |
        cd ${{ env.DIST }}
        echo "start up simulator..."
        ${{ env.DIST }}/modbus_server &
        sleep 2
        echo "test Modbus callbacks and read/write"
        ${{ env.DIST }}/test_callback_ex_modbus
        echo "shut down server."
        killall modbus_server -TERM &> /dev/null

    - name: INSTALL
      run: cd ${{ env.BUILD }}; make install

    - name: Create ZIP artifacts
      run: |
        cd ${{ env.DIST }}
        # Create dev ZIP with only library files
        zip -r "../${{ env.ARTIFACT }}_dev.zip" libplctag.*

        # Create tools ZIP with library and tools
        zip -r "../${{ env.ARTIFACT }}_tools.zip" libplctag.* ab_server list_tags_logix list_tags_micro8x0

        # Create full ZIP with all binaries
        zip -r "../${{ env.ARTIFACT }}.zip" .

        # Move ZIPs to a release directory
        cd ..
        mkdir -p release_zips
        mv *.zip release_zips/

    - name: Upload ZIP artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.ARTIFACT }}_zips
        path: ${{ env.BUILD }}/release_zips/*.zip
